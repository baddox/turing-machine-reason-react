// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Tape$ReactTemplate = require("./Tape.bs.js");
var Symbol$ReactTemplate = require("./Symbol.bs.js");
var HeadMove$ReactTemplate = require("./HeadMove.bs.js");

function next(tm) {
  var match = tm[/* state */0][/* action */2];
  if (match) {
    var match$1 = Curry._1(match[0], tm[/* tape */1][/* current */1]);
    var tape = Tape$ReactTemplate.move(match$1[/* move */1], Tape$ReactTemplate.write(match$1[/* write */0], tm[/* tape */1]));
    return /* record */[
            /* state */match$1[/* next */2],
            /* tape */tape
          ];
  } else {
    return tm;
  }
}

function toSentence(tm) {
  var match = tm[/* state */0][/* action */2];
  if (match) {
    var match$1 = Curry._1(match[0], tm[/* tape */1][/* current */1]);
    var next = match$1[/* next */2];
    var statePhrase = Caml_obj.caml_equal(next, tm[/* state */0]) ? "and remain in State:" + next[/* name */0] : "and switch to State:" + next[/* name */0];
    return $$String.concat(", ", /* :: */[
                "State:" + (tm[/* state */0][/* name */0] + (" will " + Symbol$ReactTemplate.verbPhrase(match$1[/* write */0]))),
                /* :: */[
                  HeadMove$ReactTemplate.verbPhrase(match$1[/* move */1]),
                  /* :: */[
                    statePhrase,
                    /* [] */0
                  ]
                ]
              ]);
  } else {
    return "and halt";
  }
}

function toString(tm) {
  var lines_000 = Tape$ReactTemplate.toString(tm[/* tape */1]);
  var lines_001 = /* :: */[
    toSentence(tm),
    /* [] */0
  ];
  var lines = /* :: */[
    lines_000,
    lines_001
  ];
  return $$String.concat("\n", lines);
}

function run(_tm) {
  while(true) {
    var tm = _tm;
    var match = tm[/* state */0][/* action */2];
    if (match) {
      var nextTm = next(tm);
      console.log(toString(nextTm));
      _tm = nextTm;
      continue ;
      
    } else {
      console.log("halted in run");
      return /* () */0;
    }
  };
}

exports.next = next;
exports.toSentence = toSentence;
exports.toString = toString;
exports.run = run;
/* No side effect */
